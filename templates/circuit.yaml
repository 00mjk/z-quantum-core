spec:
  templates:
    # Generate random parameters for an ansatz
    - name: generate-random-ansatz-params
      parent: generic-task
      inputs:
        parameters:
          - name: ansatz-specs
            default: None
          - name: number-of-params
            default: None
          - name: min-val
            default: -0.01
          - name: max-val
            default: 0.01
          - name: seed
            default: None
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                import numpy as np
                from zquantum.core.circuit import save_circuit_template_params
                from zquantum.core.utils import create_object
                if {{inputs.parameters.ansatz-specs}} is not None:
                  ansatz_specs = {{inputs.parameters.ansatz-specs}}
                  ansatz = create_object(ansatz_specs)
                  number_of_params = ansatz.number_of_params
                elif {{inputs.parameters.number-of-params}} is not None:
                  number_of_params = {{inputs.parameters.number-of-params}}
                if {{inputs.parameters.seed}} is not None:
                  np.random.seed({{inputs.parameters.seed}})
                params = np.random.uniform({{inputs.parameters.min-val}}, {{inputs.parameters.max-val}}, number_of_params)
                save_circuit_template_params(params, 'params.json')
      outputs:
        artifacts:
          - name: params
            path: /app/params.json

    # Combine ansatz parameter
    - name: combine-ansatz-params
      parent: generic-task
      inputs:
        parameters:
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: params1
            path: /app/params1.json
          - name: params2
            path: /app/params2.json
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import combine_ansatz_params, load_circuit_template_params, save_circuit_template_params
                params1 = load_circuit_template_params('params1.json')
                params2 = load_circuit_template_params('params2.json')
                combined_params = combine_ansatz_params(params1, params2)
                save_circuit_template_params(combined_params, 'combined_params.json')
      outputs:
        artifacts:
          - name: combined-params
            path: /app/combined_params.json

    # Build circuit for ansatz
    - name: build-ansatz-circuit
      parent: generic-task
      inputs:
        parameters:
        - name: ansatz-specs
        - name: command
          value: python3 main_script.py
        artifacts:
        - name: params
          optional: True
          path: /app/params.json
        - name: main-script
          path: /app/main_script.py
          raw:
            data: |
              from zquantum.core.utils import create_object
              from zquantum.core.circuit import (load_circuit_template_params,
                                                save_circuit)
              import os
              ansatz = create_object({{inputs.parameters.ansatz-specs}})
              if os.path.exists('params.json'):
                params = load_circuit_template_params('params.json')
              else:
                params = None
              
              if params is not None:
                circuit = ansatz.get_executable_circuit(params)
              elif ansatz.supports_parametrized_circuits:
                circuit = ansatz.parametrized_circuit()
              else:
                raise(Exception("Ansatz is not parametrizable and no parameters has been provided."))
              save_circuit(circuit, 'circuit.json')
      outputs:
        artifacts:
        - name: circuit
          path: /app/circuit.json

    # Build uniform parameter grid
    - name: build-uniform-parameter-grid
      parent: generic-task
      inputs:
        parameters:
          - name: ansatz-specs
            default: None
          - name: number-of-params-per-layer
            optional: None
          - name: n-layers
            default: 1
          - name: min-value
          - name: max-value
          - name: step
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import (save_parameter_grid,
                                                   build_uniform_param_grid)
                from zquantum.core.utils import create_object
                if {{inputs.parameters.ansatz-specs}} is not None:
                  ansatz_specs = {{inputs.parameters.ansatz-specs}}
                  ansatz = create_object(ansatz_specs)
                  number_of_params = ansatz.number_of_params
                elif {{inputs.parameters.number-of-params-per-layer}} is not None:
                  number_of_params = {{inputs.parameters.number-of-params-per-layer}}

                grid = build_uniform_param_grid(number_of_params,
                                                    {{inputs.parameters.n-layers}},
                                                    {{inputs.parameters.min-value}},
                                                    {{inputs.parameters.max-value}},
                                                    {{inputs.parameters.step}})
                save_parameter_grid(grid, 'parameter_grid.json')
      outputs:
        artifacts:
          - name: parameter-grid
            path: /app/parameter_grid.json

    - name: build-circuit-layers-and-connectivity
      parent: generic-task
      inputs:
        parameters:
          - name: x-dimension
          - name: y-dimension
            default: "None"
          - name: layer-type
            default: "nearest-neighbor"
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import (save_circuit_layers,
                                                   save_circuit_connectivity,
                                                   build_circuit_layers_and_connectivity)
                connectivity, layers = build_circuit_layers_and_connectivity(
                                                    {{inputs.parameters.x-dimension}},
                                                    {{inputs.parameters.y-dimension}},
                                                    '{{inputs.parameters.layer-type}}')
                save_circuit_layers(layers, 'circuit_layers.json')
                save_circuit_connectivity(connectivity, 'circuit_connectivity.json')
      outputs:
        artifacts:
          - name: circuit-layers
            path: /app/circuit_layers.json
          - name: circuit-connectivity
            path: /app/circuit_connectivity.json

    - name: create-random-circuit
      parent: generic-task
      inputs:
        parameters:
          - name: num-qubits
          - name: num-gates
          - name: seed
            default: "None"
          - name: command
            value: python3 main_script.py
        artifacts:
          - name: main-script
            path: /app/main_script.py
            raw:
              data: |
                from zquantum.core.circuit import save_circuit
                from zquantum.core.testing import create_random_circuit
                circuit = create_random_circuit({{inputs.parameters.num-qubits}},
                  {{inputs.parameters.num-gates}}, seed={{inputs.parameters.seed}})
                save_circuit(circuit, "circuit.json")
      outputs:
        artifacts:
          - name: circuit
            path: /app/circuit.json
