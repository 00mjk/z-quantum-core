spec:
  templates:
  - name: evaluate-python-expression
    parent: generic-task
    inputs:
      parameters:
      - name: expression
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            with open('result.txt', 'w') as f:
              f.write(str({{inputs.parameters.expression}}))
    outputs:
      parameters:
      - name: result
        valueFrom:
          path: /app/result.txt

  - name: generate-range
    parent: generic-task
    inputs:
      parameters:
      - name: start
        default: 0
      - name: stop
      - name: step
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            import numpy as np
            import json
            start = int({{inputs.parameters.start}})
            stop = int({{inputs.parameters.stop}})
            step = int({{inputs.parameters.step}})
            values = list(np.arange(start, stop + step / 2, step))
            with open("values.txt", "w") as f:
                f.write(json.dumps(values))
    outputs:
      parameters:
      - name: values
        valueFrom:
          path: /app/values.txt          

