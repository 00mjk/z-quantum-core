# Workflow API version
apiVersion: io.orquestra.workflow/1.0.0

# Prefix for workflow ID
name: create-circuit-set

imports:
- name: z-quantum-core
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-core.git"
    branch: "workflow-v1"
- name: z-quantum-qcbm
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-qcbm.git"
    branch: "workflow-v1"

steps:
- name: get-initial-parameters
  config:
    runtime:
      type: python3
      imports: [z-quantum-core, z-quantum-qcbm]
      parameters:
        file: z-quantum-core/tasks/circuit_tasks.py
        function: generate_random_ansatz_params
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - ansatz_specs: '{"module_name": "zquantum.qcbm.ansatz", "function_name": "QCBMAnsatz", "number_of_layers": 4, "number_of_qubits": 4, "topology": "all"}'
      type: string
    - min_value: -1.57
      type: float
    - max_value: 1.57
      type: float
    - seed: 9
      type: int
    - number_of_parameters: "None"
      type: string
  outputs:
    - name: params
      type: ansatz-params
- name: get-other-parameters
  config:
    runtime:
      type: python3
      imports: [z-quantum-core, z-quantum-qcbm]
      parameters:
        file: z-quantum-core/tasks/circuit_tasks.py
        function: generate_random_ansatz_params
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - ansatz_specs: '{"module_name": "zquantum.qcbm.ansatz", "function_name": "QCBMAnsatz", "number_of_layers": 4, "number_of_qubits": 4, "topology": "all"}'
      type: string
    - min_value: -3.14
      type: float
    - max_value: 3.14
      type: float
    - seed: 341
      type: int
    - number_of_parameters: "None"
      type: string
  outputs:
    - name: params
      type: ansatz-params
- name: build-circuit
  passed: [get-initial-parameters]
  config:
    runtime:
      type: python3
      imports: [z-quantum-core, z-quantum-qcbm]
      parameters:
        file: z-quantum-core/tasks/circuit_tasks.py
        function: build_ansatz_circuit
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - ansatz_specs: '{"module_name": "zquantum.qcbm.ansatz", "function_name": "QCBMAnsatz", "number_of_layers": 4, "number_of_qubits": 4, "topology": "all"}'
      type: string
    - params: ((get-initial-parameters.params))
      type: ansatz-params
  outputs:
    - name: circuit
      type: ansatz-circuit
- name: build-other-circuit
  passed: [get-other-parameters]
  config:
    runtime:
      type: python3
      imports: [z-quantum-core, z-quantum-qcbm]
      parameters:
        file: z-quantum-core/tasks/circuit_tasks.py
        function: build_ansatz_circuit
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - ansatz_specs: '{"module_name": "zquantum.qcbm.ansatz", "function_name": "QCBMAnsatz", "number_of_layers": 4, "number_of_qubits": 4, "topology": "all"}'
      type: string
    - params: ((get-other-parameters.params))
      type: ansatz-params
  outputs:
    - name: circuit
      type: ansatz-circuit
- name: add-circuits
  passed: [build-circuit, build-other-circuit]
  config:
    runtime:
      type: python3
      imports: [z-quantum-core]
      parameters:
        file: z-quantum-core/tasks/circuit_tasks.py
        function: create_circuit_set_from_circuit_artifacts
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - circuit1: ((build-circuit.circuit))
      type: ansatz-circuit
    - circuit2: ((build-other-circuit.circuit))
      type: ansatz-circuit
    - circuit3: "None"
      type: string
    - circuit4: "None"
      type: string
    - circuit_set: "None"
      type: string
  outputs:
    - name: circuit-set
      type: circuitset

types:
  - ansatz-circuit
  - ansatz-params
  - circuitset
